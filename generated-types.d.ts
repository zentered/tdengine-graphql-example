/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * TDEngine Timestamp as Date
     */
    tdDate<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "TDDate";
    /**
     * TDEngine Timestamp
     */
    ts<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Timestamp";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * TDEngine Timestamp as Date
     */
    tdDate<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "TDDate";
    /**
     * TDEngine Timestamp
     */
    ts<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  TDDate: any
  Timestamp: any
}

export interface NexusGenObjects {
  Query: {};
  Vessel: { // root type
    imo?: string | null; // String
    mmsi?: string | null; // String
    movements?: Array<NexusGenRootTypes['VesselMovement'] | null> | null; // [VesselMovement]
    name?: string | null; // String
  }
  VesselMovement: { // root type
    heading?: number | null; // Float
    latitude?: number | null; // Float
    longitude?: number | null; // Float
    mmsi?: string | null; // String
    name?: string | null; // String
    nav_status?: number | null; // Int
    speed?: number | null; // Float
    ts?: NexusGenScalars['Timestamp'] | null; // Timestamp
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    latestMovements: Array<NexusGenRootTypes['VesselMovement'] | null> | null; // [VesselMovement]
    vessel: NexusGenRootTypes['Vessel'] | null; // Vessel
  }
  Vessel: { // field return type
    imo: string | null; // String
    mmsi: string | null; // String
    movements: Array<NexusGenRootTypes['VesselMovement'] | null> | null; // [VesselMovement]
    name: string | null; // String
  }
  VesselMovement: { // field return type
    date: NexusGenScalars['TDDate'] | null; // TDDate
    heading: number | null; // Float
    latitude: number | null; // Float
    longitude: number | null; // Float
    mmsi: string | null; // String
    name: string | null; // String
    nav_status: number | null; // Int
    speed: number | null; // Float
    ts: NexusGenScalars['Timestamp'] | null; // Timestamp
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    latestMovements: 'VesselMovement'
    vessel: 'Vessel'
  }
  Vessel: { // field return type name
    imo: 'String'
    mmsi: 'String'
    movements: 'VesselMovement'
    name: 'String'
  }
  VesselMovement: { // field return type name
    date: 'TDDate'
    heading: 'Float'
    latitude: 'Float'
    longitude: 'Float'
    mmsi: 'String'
    name: 'String'
    nav_status: 'Int'
    speed: 'Float'
    ts: 'Timestamp'
  }
}

export interface NexusGenArgTypes {
  Query: {
    vessel: { // args
      mmsi?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false
    __typename: false
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}